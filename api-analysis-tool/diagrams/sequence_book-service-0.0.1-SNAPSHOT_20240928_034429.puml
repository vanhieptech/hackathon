@startuml
!pragma teoz true
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60
skinparam responseMessageBelowArrow true
skinparam ParticipantPadding 20
skinparam BoxPadding 10

actor Client
participant BookController
participant AuthorServiceClient
participant BookService
participant localhost
database BookDB

== com/example/controller/BookController.<init> ==
Client -> BookController : null /api/books
activate BookController
note over UnknownClass : Load var0
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookController --> Client : HTTP Response (void)
deactivate BookController

== com/example/controller/BookController.getAllBooks ==
Client -> BookController : GET /api/books
activate BookController
note over BookController : @GetMapping
note over UnknownClass : Load var0
BookController -> BookService : getAllBooks()
activate BookService
BookService --> BookController : return java.util.List
deactivate BookService
BookController --> Client : HTTP Response (java.util.List)
deactivate BookController

== com/example/controller/BookController.getBookById ==
Client -> BookController : GET /api/books/{id}
activate BookController
note over BookController : @GetMapping
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookController -> BookService : getBookById(java.lang.Long)
activate BookService
BookService --> BookController : return java.util.Optional
deactivate BookService
note over BookController
Lambda or Method Reference: apply
Descriptor: ()Ljava/util/function/Function;
end note
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.createBook ==
Client -> BookController : POST /api/books
activate BookController
note over BookController : @PostMapping
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookController -> BookService : createBook(com.example.model.Book)
activate BookService
BookService --> BookController : return com.example.model.Book
deactivate BookService
BookController --> Client : HTTP Response (com.example.model.Book)
deactivate BookController

== com/example/controller/BookController.updateBook ==
Client -> BookController : PUT /api/books/{id}
activate BookController
note over BookController : @PutMapping
note over UnknownClass : Load var0
note over UnknownClass : Load var1
note over UnknownClass : Load var2
BookController -> BookService : updateBook(java.lang.Long, com.example.model.Book)
activate BookService
BookService --> BookController : return java.util.Optional
deactivate BookService
note over BookController
Lambda or Method Reference: apply
Descriptor: ()Ljava/util/function/Function;
end note
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.deleteBook ==
Client -> BookController : DELETE /api/books/{id}
activate BookController
note over BookController : @DeleteMapping
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookController -> BookService : deleteBook(java.lang.Long)
activate BookService
BookService --> BookController : return void
deactivate BookService
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.getBookWithAuthor ==
Client -> BookController : GET /api/books/{id}/with-author
activate BookController
note over BookController : @GetMapping
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookController -> BookService : getBookWithAuthor(java.lang.Long)
activate BookService
BookService --> BookController : return java.util.Optional
deactivate BookService
note over BookController
Lambda or Method Reference: apply
Descriptor: ()Ljava/util/function/Function;
end note
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/service/impl/BookServiceImpl.<init> ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var0
note over UnknownClass : Load var1
note over UnknownClass : Load var0
note over UnknownClass : Load var2
BookServiceImpl --> Client : HTTP Response (void)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.getAllBooks ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
BookService -> JpaRepository : findAll()
activate JpaRepository
JpaRepository --> BookService : return java.util.List
deactivate JpaRepository
BookServiceImpl --> Client : HTTP Response (java.util.List)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.getBookById ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> JpaRepository : findById(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return java.util.Optional
deactivate JpaRepository
BookServiceImpl --> Client : HTTP Response (java.util.Optional)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.createBook ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> JpaRepository : save(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return java.lang.Object
deactivate JpaRepository
BookServiceImpl --> Client : HTTP Response (com.example.model.Book)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.updateBook ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> JpaRepository : findById(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return java.util.Optional
deactivate JpaRepository
note over UnknownClass : Load var0
note over UnknownClass : Load var2
note over BookService
Lambda or Method Reference: apply
Descriptor: (Lcom/example/service/impl/BookServiceImpl;Lcom/example/model/Book;)Ljava/util/function/Function;
end note
BookServiceImpl --> Client : HTTP Response (java.util.Optional)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.deleteBook ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> JpaRepository : deleteById(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return void
deactivate JpaRepository
BookServiceImpl --> Client : HTTP Response (void)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.getBookWithAuthor ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> JpaRepository : findById(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return java.util.Optional
deactivate JpaRepository
note over UnknownClass : Load var0
note over BookService
Lambda or Method Reference: apply
Descriptor: (Lcom/example/service/impl/BookServiceImpl;)Ljava/util/function/Function;
end note
BookServiceImpl --> Client : HTTP Response (java.util.Optional)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.lambda$getBookWithAuthor$1 ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var0
note over UnknownClass : Load var1
BookService -> AuthorServiceClient : getAuthor(java.lang.Long)
activate AuthorServiceClient
note right of AuthorServiceClient
Asynchronous operation
Return type: reactor.core.publisher.Mono
end note
AuthorServiceClient --> BookService : return reactor.core.publisher.Mono
deactivate AuthorServiceClient
note over UnknownClass : Store var2
note over UnknownClass : Load constant: Book: %s, Author: %s, Publication Date: %s
note over UnknownClass : Load var1
note over UnknownClass : Load var2
note over UnknownClass : Load var1
note over UnknownClass : Store var2
note over UnknownClass : Load constant: Book: %s, Author: Not found, Publication Date: %s
note over UnknownClass : Load var1
note over UnknownClass : Load var1
note over UnknownClass : Store var2
note over UnknownClass : Load constant: Book: %s, Author: Error fetching author (%s), Publication Date: %s
note over UnknownClass : Load var1
note over UnknownClass : Load var2
note over UnknownClass : Load var1
group #LightGray Try
BookService -> AuthorServiceClient : getAuthor(java.lang.Long)
activate AuthorServiceClient
note right of AuthorServiceClient
Asynchronous operation
Return type: reactor.core.publisher.Mono
end note
AuthorServiceClient --> BookService : return reactor.core.publisher.Mono
deactivate AuthorServiceClient
end
group #LightCoral Catch AuthorNotFoundException
end
group #LightGray Try
BookService -> AuthorServiceClient : getAuthor(java.lang.Long)
activate AuthorServiceClient
note right of AuthorServiceClient
Asynchronous operation
Return type: reactor.core.publisher.Mono
end note
AuthorServiceClient --> BookService : return reactor.core.publisher.Mono
deactivate AuthorServiceClient
end
group #LightCoral Catch Exception
end
BookServiceImpl --> Client : HTTP Response (java.lang.String)
deactivate BookServiceImpl

== com/example/service/impl/BookServiceImpl.lambda$updateBook$0 ==
Client -> BookServiceImpl : null null
activate BookServiceImpl
note over UnknownClass : Load var2
note over UnknownClass : Load var1
note over UnknownClass : Load var2
note over UnknownClass : Load var1
note over UnknownClass : Load var2
note over UnknownClass : Load var1
note over UnknownClass : Load var2
note over UnknownClass : Load var1
note over UnknownClass : Load var0
note over UnknownClass : Load var2
BookService -> JpaRepository : save(java.lang.Object)
activate JpaRepository
JpaRepository --> BookService : return java.lang.Object
deactivate JpaRepository
BookServiceImpl --> Client : HTTP Response (com.example.model.Book)
deactivate BookServiceImpl

== com/example/service/AuthorServiceClient.<init> ==
Client -> AuthorServiceClient : null null
activate AuthorServiceClient
note over UnknownClass : Load var0
note over UnknownClass : Load var0
note over UnknownClass : Load var1
note over UnknownClass : Load constant: http://localhost:8081
AuthorServiceClient -> ExternalAPI : baseUrl(java.lang.String)
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$Builder
deactivate ExternalAPI
AuthorServiceClient -> ExternalAPI : build()
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient
deactivate ExternalAPI
AuthorServiceClient --> Client : HTTP Response (void)
deactivate AuthorServiceClient

== com/example/service/AuthorServiceClient.getAuthor ==
Client -> AuthorServiceClient : null null
activate AuthorServiceClient
note over UnknownClass : Load var0
AuthorServiceClient -> ExternalAPI : get()
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec
deactivate ExternalAPI
note over UnknownClass : Load constant: /api/authors/{id}
note over UnknownClass : Load var1
AuthorServiceClient -> ExternalAPI : uri(java.lang.String, java.lang.Object[])
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec
deactivate ExternalAPI
AuthorServiceClient -> ExternalAPI : retrieve()
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$ResponseSpec
deactivate ExternalAPI
note over AuthorServiceClient
Lambda or Method Reference: test
Descriptor: ()Ljava/util/function/Predicate;
end note
note over UnknownClass : Load var1
note over AuthorServiceClient
Lambda or Method Reference: apply
Descriptor: (Ljava/lang/Long;)Ljava/util/function/Function;
end note
AuthorServiceClient -> ExternalAPI : onStatus(java.util.function.Predicate, java.util.function.Function)
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$ResponseSpec
deactivate ExternalAPI
note over AuthorServiceClient
Lambda or Method Reference: test
Descriptor: ()Ljava/util/function/Predicate;
end note
note over AuthorServiceClient
Lambda or Method Reference: apply
Descriptor: ()Ljava/util/function/Function;
end note
AuthorServiceClient -> ExternalAPI : onStatus(java.util.function.Predicate, java.util.function.Function)
activate ExternalAPI
ExternalAPI --> AuthorServiceClient : return org.springframework.web.reactive.function.client.WebClient$ResponseSpec
deactivate ExternalAPI
note over UnknownClass : Load constant: Lcom/example/dto/AuthorDTO;
AuthorServiceClient -> ExternalAPI : bodyToMono(java.lang.Class)
activate ExternalAPI
note right of ExternalAPI
Asynchronous operation
Return type: reactor.core.publisher.Mono
end note
ExternalAPI --> AuthorServiceClient : return reactor.core.publisher.Mono
deactivate ExternalAPI
AuthorServiceClient --> Client : HTTP Response (reactor.core.publisher.Mono)
deactivate AuthorServiceClient

== com/example/service/AuthorServiceClient.lambda$getAuthor$1 ==
Client -> AuthorServiceClient : null null
activate AuthorServiceClient
note over UnknownClass : Load var0
AuthorServiceClient -> ClientResponse : statusCode()
activate ClientResponse
ClientResponse --> AuthorServiceClient : return org.springframework.http.HttpStatus
deactivate ClientResponse
note over AuthorServiceClient
Lambda or Method Reference: makeConcatWithConstants
Descriptor: (Ljava/lang/String;)Ljava/lang/String;
end note
AuthorServiceClient --> Client : HTTP Response (reactor.core.publisher.Mono)
deactivate AuthorServiceClient

== com/example/service/AuthorServiceClient.lambda$getAuthor$0 ==
Client -> AuthorServiceClient : null null
activate AuthorServiceClient
note over UnknownClass : Load var1
AuthorServiceClient -> ClientResponse : statusCode()
activate ClientResponse
ClientResponse --> AuthorServiceClient : return org.springframework.http.HttpStatus
deactivate ClientResponse
alt condition
group #LightYellow group_3
end
else
group #LightCyan group_4
end
end
note over UnknownClass : Load var0
note over AuthorServiceClient
Lambda or Method Reference: makeConcatWithConstants
Descriptor: (Ljava/lang/Long;)Ljava/lang/String;
end note
note over UnknownClass : Load var1
AuthorServiceClient -> ClientResponse : statusCode()
activate ClientResponse
ClientResponse --> AuthorServiceClient : return org.springframework.http.HttpStatus
deactivate ClientResponse
note over AuthorServiceClient
Lambda or Method Reference: makeConcatWithConstants
Descriptor: (Ljava/lang/String;)Ljava/lang/String;
end note
AuthorServiceClient --> Client : HTTP Response (reactor.core.publisher.Mono)
deactivate AuthorServiceClient

@enduml