@startuml
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60

actor Client
participant BookController
participant BookService
database BookDB

== com/example/controller/BookController.getAllBooks ==
Client -> BookController : GET /api/books
activate BookController
BookController -> BookService : getAllBooks
activate BookService
BookService -> BookRepository : findAll
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return java.util.List
deactivate BookRepository
BookService --> BookController : return java.util.List
deactivate BookService
BookController --> Client : HTTP Response (java.util.List)
deactivate BookController

== com/example/controller/BookController.getBookById ==
Client -> BookController : GET /api/books/{id}
activate BookController
BookController -> BookService : getBookById
activate BookService
BookService -> BookRepository : findById
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return java.util.Optional
deactivate BookRepository
BookService --> BookController : return java.util.Optional
deactivate BookService
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.createBook ==
Client -> BookController : POST /api/books
activate BookController
BookController -> BookService : createBook
activate BookService
BookService -> BookRepository : save
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return java.lang.Object
deactivate BookRepository
BookService --> BookController : return com.example.model.Book
deactivate BookService
BookController --> Client : HTTP Response (com.example.model.Book)
deactivate BookController

== com/example/controller/BookController.updateBook ==
Client -> BookController : PUT /api/books/{id}
activate BookController
BookController -> BookService : updateBook
activate BookService
BookService -> BookRepository : findById
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return java.util.Optional
deactivate BookRepository
BookService --> BookController : return java.util.Optional
deactivate BookService
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.deleteBook ==
Client -> BookController : DELETE /api/books/{id}
activate BookController
BookController -> BookService : deleteBook
activate BookService
BookService -> BookRepository : deleteById
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return void
deactivate BookRepository
BookService --> BookController : return void
deactivate BookService
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

== com/example/controller/BookController.getBookWithAuthor ==
Client -> BookController : GET /api/books/{id}/with-author
activate BookController
BookController -> BookService : getBookWithAuthor
activate BookService
BookService -> BookRepository : findById
activate BookRepository
BookRepository -> BookDB : execute query
BookDB --> BookRepository : return data
BookRepository --> BookService : return java.util.Optional
deactivate BookRepository
BookService --> BookController : return java.util.Optional
deactivate BookService
BookController --> Client : HTTP Response (org.springframework.http.ResponseEntity)
deactivate BookController

@enduml